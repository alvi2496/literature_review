Automatically generated by Mendeley Desktop 1.19.3
Any changes to this file will be lost if it is regenerated by Mendeley.

BibTeX export options can be customized via Options -> BibTeX in Mendeley Desktop

@article{Robillard2009,
abstract = {The paper discusses the application program interface (API). Most software projects reuse components exposed through APIs. In fact, current-day software development technologies are becoming inseparable from the large APIs they provide. An API is the interface to implemented functionality that developers can access to perform various tasks. APIs support code reuse, provide high-level abstractions that facilitate programming tasks, and help unify the programming experience. A study of obstacles that professional Microsoft developers faced when learning to use APIs uncovered challenges and resulting implications for API users and designers. The article focuses on the obstacles to learning an API. Although learnability is only one dimension of usability, there's a clear relationship between the two, in that difficult-to-use APIs are likely to be difficult to learn as well. Many API usability studies focus on situations where developers are learning to use an API. The author concludes that as APIs keep growing larger, developers will need to learn a proportionally smaller fraction of the whole. In such situations, the way to foster more efficient API learning experiences is to include more sophisticated means for developers to identify the information and the resources they need-even for well-designed and documented APIs.},
author = {Robillard, Martin P},
doi = {10.1109/MS.2009.193},
file = {:home/alvi/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Robillard - 2009 - What makes APIs hard to learn answers from developers.pdf:pdf},
isbn = {0740-7459 VO - 26},
issn = {07407459},
journal = {IEEE Software},
keywords = {API design,API usability,Application interfaces,Code examples,Context,Data mining,Documentation,Empirical study,Software documentation,Usability},
number = {6},
pages = {27--34},
title = {{What makes APIs hard to learn? answers from developers}},
volume = {26},
year = {2009}
}
@inproceedings{Thongtanunam2015,
abstract = {Software code review is an inspection of a code change by an independent third-party developer in order to identify and fix defects before an integration. Effectively performing code review can improve the overall software quality. In recent years, Modern Code Review (MCR), a lightweight and tool-based code inspection, has been widely adopted in both proprietary and open-source software systems. Finding appropriate code-reviewers in MCR is a necessary step of reviewing a code change. However, little research is known the difficulty of finding code-reviewers in a distributed software development and its impact on reviewing time. In this paper, we investigate the impact of reviews with code-reviewer assignment problem has on reviewing time. We find that reviews with code-reviewer assignment problem take 12 days longer to approve a code change. To help developers find appropriate code-reviewers, we propose RevFinder, a file location-based code-reviewer recommendation approach. We leverage a similarity of previously reviewed file path to recommend an appropriate code-reviewer. The intuition is that files that are located in similar file paths would be managed and reviewed by similar experienced code-reviewers. Through an empirical evaluation on a case study of 42,045 reviews of Android Open Source Project (AOSP), OpenStack, Qt and LibreOffice projects, we find that RevFinder accurately recommended 79{\%} of reviews with a top 10 recommendation. RevFinder also correctly recommended the code-reviewers with a median rank of 4. The overall ranking of RevFinder is 3 times better than that of a baseline approach. We believe that RevFinder could be applied to MCR in order to help developers find appropriate code-reviewers and speed up the overall code review process.},
author = {Thongtanunam, Patanamon and Tantithamthavorn, Chakkrit and Kula, Raula Gaikovina and Yoshida, Norihiro and Iida, Hajimu and Matsumoto, Ken Ichi},
booktitle = {2015 IEEE 22nd International Conference on Software Analysis, Evolution, and Reengineering, SANER 2015 - Proceedings},
doi = {10.1109/SANER.2015.7081824},
file = {:home/alvi/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Thongtanunam et al. - 2015 - Who should review my code A file location-based code-reviewer recommendation approach for Modern Code Revie.pdf:pdf},
isbn = {9781479984695},
issn = {1534-5351},
keywords = {Code-Reviewer Recommendation,Distributed Software Development,Modern Code Review},
pages = {141--150},
title = {{Who should review my code? A file location-based code-reviewer recommendation approach for Modern Code Review}},
year = {2015}
}
@article{Murphy-Hill2015,
abstract = {Microsoft Developers don't fix bugs according to a set procedure. The social pressure of ship dates affects how and what ways they fix bugs.},
author = {Murphy-Hill, Emerson and Zimmermann, Thomas and Bird, Christian and Nagappan, Nachiappan},
doi = {10.1109/TSE.2014.2357438},
file = {:home/alvi/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Murphy-Hill et al. - 2015 - The design space of bug fixes and how developers navigate it.pdf:pdf},
isbn = {9781467330763},
issn = {00985589},
journal = {IEEE Transactions on Software Engineering},
keywords = {Design concepts,Human factors in software design,Maintainability},
number = {1},
pages = {65--81},
publisher = {IEEE},
title = {{The design space of bug fixes and how developers navigate it}},
volume = {41},
year = {2015}
}
@inproceedings{Rodeghero2017,
abstract = {User stories are descriptions of functionality that a software user needs. They play an important role in determining which software requirements and bug fixes should be handled and in what order. Developers elicit user stories through meetings with customers. But user story elicitation is complex, and involves many passes to accommodate shifting and unclear customer needs. The result is that developers must take detailed notes during meetings or risk missing important information. Ideally, developers would be freed of the need to take notes themselves, and instead speak naturally with their customers. This paper is a step towards that ideal. We present a technique for automatically extracting information relevant to user stories from recorded conversations between customers and developers. We perform a qualitative study to demonstrate that user story information exists in these conversations in a sufficient quantity to extract automatically. From this, we found that roughly 10.2{\%} of these conversations contained user story information. Then, we test our technique in a quantitative study to determine the degree to which our technique can extract user story information. In our experiment, our process obtained about 70.8{\%} precision and 18.3{\%} recall on the information.},
author = {Rodeghero, Paige and Jiang, Siyuan and Armaly, Ameer and McMillan, Collin},
booktitle = {Proceedings - 2017 IEEE/ACM 39th International Conference on Software Engineering, ICSE 2017},
doi = {10.1109/ICSE.2017.13},
file = {:home/alvi/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Rodeghero et al. - 2017 - Detecting User Story Information in Developer-Client Conversations to Generate Extractive Summaries.pdf:pdf},
isbn = {9781538638682},
keywords = {developer communication,productivity,software engineering,transcripts,user story generation},
pages = {49--59},
title = {{Detecting User Story Information in Developer-Client Conversations to Generate Extractive Summaries}},
year = {2017}
}
@article{Curtis2012a,
abstract = {This study summarizes results of a study of Technical Debt across 745 business applications comprising 365 million lines of code collected from 160 companies in 10 industry segments. These applications were submitted to a static analysis that evaluates quality within and across application layers that may be coded in different languages. The analysis consists of evaluating the application against a repository of over 1200 rules of good architectural and coding practice. A formula for estimating Technical Debt with adjustable parameters is presented. Results are presented for Technical Debt across the entire sample as well as for different programming languages and quality factors.},
author = {Curtis, Bill and Sappidi, Jay and Szynkarski, Alexandra},
doi = {10.1109/MTD.2012.6226000},
file = {:home/alvi/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Curtis, Sappidi, Szynkarski - 2012 - Estimating the size, cost, and types of technical debt.pdf:pdf},
isbn = {9781467317498},
journal = {2012 3rd International Workshop on Managing Technical Debt, MTD 2012 - Proceedings},
keywords = {benchmarking,software metrics,software structural quality,static analysis,technical debt},
pages = {49--53},
pmid = {18480},
publisher = {IEEE},
title = {{Estimating the size, cost, and types of technical debt}},
year = {2012}
}
@inproceedings{Palau2009,
abstract = {投稿を意見と非意見に分解し、さらに意見を前提と結論に分解し、前提・結論・非意見の三種に分類するもの。},
author = {Palau, Raquel Mochales and Moens, Marie Francine},
booktitle = {Belgian/Netherlands Artificial Intelligence Conference},
doi = {10.1145/1568234.1568246},
file = {:home/alvi/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Palau, Moens - 2009 - Argumentation mining The Detection, Classification and Structuring of Arguments in Text.pdf:pdf},
isbn = {9781605585970},
issn = {15687805},
pages = {351--352},
title = {{Argumentation mining: The Detection, Classification and Structuring of Arguments in Text}},
year = {2009}
}
@article{Sousa2017,
abstract = {When a software design decision has a negative impact on one or more quality attributes, we call it a design problem. For example, the Fat Interface problem indicates that an interface exposes non-cohesive services Thus, clients and implementations of this interface may have to handle with services that they are not interested. A design problem such as this hampers the extensibility and maintainability of a software system. As illustrated by the example, a single design problem often affects several elements in the program. Despite its harmfulness, it is difficult to identify a design problem in a system. It is even more challenging to identify design problems when the source code is the only available artifact. In particular, no study has observed what strategy(ies) developers use in practice to identify design problems when the design documentation is unavailable. In order to address this gap, we conducted a qualitative analysis on how developers identify design problems in two different scenarios: when they are either familiar (Scenario 1) or unfamiliar (Scenario 2) with the analyzed systems. Developers familiar with the systems applied a diverse set of strategies during the identification of each design problem. Some strategies were frequently used to locate code elements for analysis, and other strategies were frequently used to confirm design problems in these elements. Developers unfamiliar with the systems relied only on the use of code smells along the task. Despite some differences among the subjects from both scenarios, we noticed that developers often search for multiple indicators during the identification of each design problem.},
author = {Sousa, Leonardo and Oliveira, Edson and Lucena, Carlos and Oliveira, Roberto and Garcia, Alessandro and Lee, Jaejoon and Conte, Tayana and Oizumi, Willian and de Mello, Rafael and Lopes, Adriana and Valentim, Natasha},
doi = {10.1145/3131151.3131168},
file = {:home/alvi/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Sousa et al. - 2017 - How Do Software Developers Identify Design Problems.pdf:pdf},
isbn = {9781450353267},
issn = {0898-4921},
journal = {Proceedings of the 31st Brazilian Symposium on Software Engineering  - SBES'17},
keywords = {acm reference format,alessandro garcia,design problem,jaejoon lee,leonardo sousa,roberto oliveira,software design,strategy,symptoms,tayana},
pages = {54--63},
title = {{How Do Software Developers Identify Design Problems?}},
url = {http://dl.acm.org/citation.cfm?doid=3131151.3131168},
year = {2017}
}
@inproceedings{Viviani2018a,
author = {Viviani, Giovanni and Janik-Jones, Calahan and Famelis, Michalis and Murphy, Gail C.},
booktitle = {Proceedings of the 11th International Workshop on Cooperative and Human Aspects of Software Engineering  - CHASE '18},
doi = {10.1145/3195836.3195841},
file = {:home/alvi/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Viviani et al. - 2018 - The structure of software design discussions.pdf:pdf},
isbn = {9781450357258},
issn = {02705257},
title = {{The structure of software design discussions}},
year = {2018}
}
@article{Oliveira2017,
abstract = {Code smells are anomalous program structures that may indicate software maintainability problems. God Classes and Feature Envies are examples of code smells that frequently become the target of software refactoring. However, smell identification might be harder than expected due to the subjectivity involved in the recognition of the apparently simple structure of each smell. Moreover, smell identification might require the knowledge of multiple program elements, which are better understood by different developers. Thus, the use of collaboration among developers may have the potential to improve effectiveness on smell identification. However, current knowledge, especially empirically developed and evaluated in the industry, is quite scarce. This paper reports an industrial case study aimed at observing how 13 developers individually and collaboratively performed smell identification in five software projects from two software development organizations. Our results suggest that collaboration contributes to improving effectiveness on the identification of a wide range of code smells. We also analyzed the factors contributing to such effectiveness improvement. {\textcopyright} 2017 IEEE.},
author = {Oliveira, Roberto and Sousa, Leonardo and {De Mello}, Rafael and Valentim, Natasha and Lopes, Adriana and Conte, Tayana and Garcia, Alessandro and Oliveira, Edson and Lucena, Carlos},
doi = {10.1109/ICSE-SEIP.2017.7},
file = {:home/alvi/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Oliveira et al. - 2017 - Collaborative identification of code smells A multi-case study.pdf:pdf},
isbn = {9781538627174},
journal = {Proceedings - 2017 IEEE/ACM 39th International Conference on Software Engineering: Software Engineering in Practice Track, ICSE-SEIP 2017},
keywords = {Case Study,Collaboration,Identification of Code Smells,Qualitative Analysis},
pages = {33--42},
title = {{Collaborative identification of code smells: A multi-case study}},
year = {2017}
}
@inproceedings{Shakiba2016,
abstract = {Software repositories contain a variety of information that can be mined and utilized to enhance software engineering processes. Patterns stored in software repository meta-data can provide useful and informative information about different aspects of a project, particularly those that may not be obvious for developers. One such aspect is the role of software design in a project. The messages connected to each commit in the repository note not only what changes have been made to project files, but potentially if those changes have somehow manipulated the design of the software. In this paper, a sample of commit messages from a random sample of projects on GitHub and SourceForge are manually classified as $\backslash$design" or $\backslash$non-design" based on a survey. The resulting data is then used to train multiple machine learning algorithms in order to determine if it is possible to predict whether or not a single commit is discussing software design. Our results show the Random Forest classifier performed best on our combined data set with a G-mean of 75.01. {\textcopyright} 2016 ACM.},
author = {Shakiba, Abbas and Green, Robert and Dyer, Robert},
booktitle = {Proceedings of the 2nd International Workshop on Software Analytics - SWAN 2016},
doi = {10.1145/2989238.2989244},
file = {:home/alvi/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Shakiba, Green, Dyer - 2016 - FourD do developers discuss design revisited.pdf:pdf},
isbn = {9781450343954},
pages = {43--46},
title = {{FourD: do developers discuss design? revisited}},
url = {http://dl.acm.org/citation.cfm?doid=2989238.2989244},
year = {2016}
}
@inproceedings{Viviani2018,
abstract = {When contributing code to a software system, developers are often confronted with the hard task of understanding and adhering to the system's design. This task is often made more difficult by the lack of explicit design information. Often, recorded design information occurs only embedded in discussions between developers. If this design information could be identified automatically and put into a form useful to developers, many development tasks could be eased, such as directing questions that arise during code review, tracking design changes that might affect desired system qualities, and helping developers understand why the code is as it is. In this paper, we take an initial step towards this goal, considering how design information appears in pull request discussions and manually categorizing 275 paragraphs from those discussions that contain design information to learn about what kinds of design topics are discussed.},
author = {Viviani, Giovanni and Janik-Jones, Calahan and Famelis, Michalis and Xia, Xin and Murphy, Gail C.},
booktitle = {Proceedings of the 26th Conference on Program Comprehension  - ICPC '18},
doi = {10.1145/3196321.3196357},
file = {:home/alvi/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Viviani et al. - 2018 - What design topics do developers discuss.pdf:pdf},
isbn = {9781450357142},
issn = {02705257},
title = {{What design topics do developers discuss?}},
year = {2018}
}
@inproceedings{Sousa2018,
author = {Sousa, Leonardo and Oliveira, Roberto and Lucena, Carlos and Paes, Rodrigo and Oliveira, Anderson and Oizumi, Willian and Barbosa, Simone and Garcia, Alessandro and Lee, Jaejoon and Kalinowski, Marcos and de Mello, Rafael and Fonseca, Baldoino},
booktitle = {Proceedings of the 40th International Conference on Software Engineering - ICSE '18},
doi = {10.1145/3180155.3180239},
file = {:home/alvi/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Sousa et al. - 2018 - Identifying design problems in the source code.pdf:pdf},
isbn = {9781450356381},
pages = {921--931},
title = {{Identifying design problems in the source code}},
url = {http://dl.acm.org/citation.cfm?doid=3180155.3180239},
year = {2018}
}
@techreport{Twitchell2004,
abstract = {Instant messaging, chat rooms and other forms of synchronous computer-mediated communication (CMC) are increasing in use in the business, military, and consumer world. The language action perspective provides methods for analyzing and modelling repeated business conversations including synchronous CMC. This paper describes a method for creating a profiles for large amounts of synchronous CMC conversation after it has occurred. Called a speech act profile, it is based on speech act theory. The profiles can be used either as patterns for classifying conversations or for creating visual maps of the conversations themselves. Application of the profiles in information retrieval and deception detection are discussed.},
author = {Twitchell, Douglas P and Adkins, Mark and Nunamaker, Jay F and Burgoon, Judee K and Twitchell, D P and Adkins, M and Nunamake, J F and Burgoon, J K},
file = {:home/alvi/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Twitchell et al. - 2004 - Using Speech Act Theory to Model Conversations for Automated Classification and Retrieval.pdf:pdf},
title = {{Using Speech Act Theory to Model Conversations for Automated Classification and Retrieval}},
url = {www.scils.rutgers.edu/lap04/lap04.htm},
year = {2004}
}
@misc{Taub2014,
abstract = {Li ZX, Yu Y, Yin G et al. What are they talking about? Analyzing code reviews in pull-based development model. Abstract Code reviews in pull-based model are open to community users on GitHub. Various participants are taking part in the review discussions and the review topics are not only about the improvement of code contributions but also about project evolution and social interaction. A comprehensive understanding of the review topics in pull-based model would be useful to better organize the code review process and optimize review tasks such as reviewer recommendation and pull-request prioritization. In this paper, we first conduct a qualitative study on three popular open-source software projects hosted on GitHub and construct a fine-grained two-level taxonomy covering four level-1 categories (code correctness, pull-request decision-making, project management, and social interaction) and 11 level-2 subcategories (e.g., defect detecting, reviewer assigning, contribution encouraging). Second, we conduct preliminary quantitative analysis on a large set of review comments that were labeled by TSHC (a two-stage hybrid classification algorithm), which is able to automatically classify review comments by combining rule-based and machine-learning techniques. Through the quantitative study, we explore the typical review patterns. We find that the three projects present similar comments distribution on each subcategory. Pull-requests submitted by inexperienced contributors tend to contain potential issues even though they have passed the tests. Furthermore, external contributors are more likely to break project conventions in their early contributions.},
author = {Taub, Jennifer},
booktitle = {Dissent},
doi = {10.1007/s11390-017},
file = {:home/alvi/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Taub - 2014 - Reforming the banks for good.pdf:pdf},
isbn = {1-7803-9392-9},
issn = {00123846},
number = {3},
pages = {34--38},
title = {{Reforming the banks for good}},
volume = {61},
year = {2014}
}
@inproceedings{Steinmacher2014,
abstract = {While onboarding an open source software (OSS) project, contributors face many different barriers that hinder their contribution, leading in many cases to dropouts. Many projects leverage the contribution of outsiders and the sustainability of the project relies on retaining some of these newcomers. In this paper, we discuss some barriers faced by newcomers to OSS. The barriers were identified using a qualitative analysis on data obtained from newcomers and members of OSS projects. We organize the results in a conceptual model composed of 38 barriers, grouped into seven different categories. These barriers may motivate new studies and the development of appropriate tooling},
author = {Steinmacher, Igor and Wiese, Igor Scaliante and Conte, Tayana and Gerosa, Marco Aur{\'{e}}lio and Redmiles, David},
booktitle = {Proceedings of the 7th International Workshop on Cooperative and Human Aspects of Software Engineering - CHASE 2014},
doi = {10.1145/2593702.2593704},
file = {:home/alvi/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Steinmacher et al. - 2014 - The hard life of open source software project newcomers.pdf:pdf},
isbn = {9781450328609},
pages = {72--78},
title = {{The hard life of open source software project newcomers}},
url = {http://dl.acm.org/citation.cfm?doid=2593702.2593704},
year = {2014}
}
@inproceedings{Brunet2014a,
abstract = {Design is often raised in the literature as important to attaining various properties and characteristics in a software system. At least for open-source projects, it can be hard to find evidence of ongoing design work in the technical artifacts produced as part of the development. Although developers usually do not produce specific design documents, they do communicate about design in different ways. In this paper, we provide quantitative evidence that developers address design through discussions in commits, issues, and pull requests. To achieve this, we built a discussions' classifier and automatically labeled 102,122 discussions from 77 projects. Based on this data, we make four observations about the projects: i) on average, 25{\%} of the discussions in a project are about design; ii) on average, 26{\%} of developers contribute to at least one design discussion; iii) only 1{\%} of the developers contribute to more than 15{\%} of the discussions in a project; and iv) these few developers who contribute to a broad range of design discussions are also the top committers in a project.},
author = {Brunet, Jo{\~{a}}o and Murphy, Gail C. and Terra, Ricardo and Figueiredo, Jorge and Serey, Dalton},
booktitle = {Proceedings of the 11th Working Conference on Mining Software Repositories - MSR 2014},
doi = {10.1145/2597073.2597115},
file = {:home/alvi/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Brunet et al. - 2014 - Do developers discuss design.pdf:pdf},
isbn = {9781450328630},
pages = {340--343},
title = {{Do developers discuss design?}},
url = {http://dl.acm.org/citation.cfm?doid=2597073.2597115},
year = {2014}
}
@inproceedings{Gousios2015,
abstract = {In the pull-based development model, the integrator has the crucial role of managing and integrating contributions. This work focuses on the role of the integrator and investigates working habits and challenges alike. We set up an exploratory qualitative study involving a large-scale survey of 749 integrators, to which we add quantitative data from the integrator's project. Our results provide insights into the factors they consider in their decision making process to accept or reject a contribution. Our key findings are that integrators struggle to maintain the quality of their projects and have difficulties with prioritizing contributions that are to be merged. Our insights have implications for practitioners who wish to use or improve their pull-based development process, as well as for researchers striving to understand the theoretical implications of the pull-based model in software development.},
author = {Gousios, Georgios and Zaidman, Andy and Storey, Margaret Anne and {Van Deursen}, Arie},
booktitle = {Proceedings - International Conference on Software Engineering},
doi = {10.1109/ICSE.2015.55},
file = {:home/alvi/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Gousios et al. - 2015 - Work practices and challenges in pull-based development The integrator's perspective.pdf:pdf},
isbn = {9781479919345},
issn = {02705257},
pages = {358--368},
pmid = {27643993},
title = {{Work practices and challenges in pull-based development: The integrator's perspective}},
volume = {1},
year = {2015}
}
@book{EngineeringStandardsCommitteeoftheIEEEComputerSociety2009,
abstract = {The required information content and organization for software design descriptions (SDDs) are described. An SDD is a representation of a software design to be used for communicating design information to its stakeholders. The requirements for the design languages (notations and other representational schemes) to be used for conformant SDDs are specified. This standard is applicable to automated databases and design description languages but can be used for paper documents and other means of descriptions.},
author = {{Standards Committee}},
booktitle = {Middle East},
doi = {10.1109/IEEESTD.2009.5167255},
file = {:home/alvi/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Engineering Standards Committee of the IEEE Computer Society - 2009 - IEEE Std 1016-2009 (Revision of IEEE Std 1016-1998), IEEE Stan.pdf:pdf},
isbn = {9780738159256},
keywords = {desig,design concern,design subject,design view},
pages = {c1--40},
title = {{IEEE Std 1016-2009 (Revision of IEEE Std 1016-1998), IEEE Standard for Information Technology—Systems Design—Software Design Descriptions}},
volume = {2009},
year = {2009}
}
@article{Yagi2017,
abstract = {We present a new task that predicts future locations of people observed in first-person videos. Consider a first-person video stream continuously recorded by a wearable camera. Given a short clip of a person that is extracted from the complete stream, we aim to predict that person's location in future frames. To facilitate this future person localization ability, we make the following three key observations: a) First-person videos typically involve significant ego-motion which greatly affects the location of the target person in future frames; b) Scales of the target person act as a salient cue to estimate a perspective effect in first-person videos; c) First-person videos often capture people up-close, making it easier to leverage target poses (e.g., where they look) for predicting their future locations. We incorporate these three observations into a prediction framework with a multi-stream convolution-deconvolution architecture. Experimental results reveal our method to be effective on our new dataset as well as on a public social interaction dataset.},
archivePrefix = {arXiv},
arxivId = {1711.11217},
author = {Yagi, Takuma and Mangalam, Karttikeya and Yonetani, Ryo and Sato, Yoichi},
doi = {10.1109/CVPR.2018.00792},
eprint = {1711.11217},
file = {:home/alvi/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Yagi et al. - 2017 - Future Person Localization in First-Person Videos.pdf:pdf},
isbn = {0160-6379},
pages = {7593--7602},
title = {{Future Person Localization in First-Person Videos}},
url = {http://arxiv.org/abs/1711.11217},
year = {2017}
}
@inproceedings{Brunet2014,
abstract = {Design is often raised in the literature as important to attaining various properties and characteristics in a software system. At least for open-source projects, it can be hard to find evidence of ongoing design work in the technical artifacts produced as part of the development. Although developers usually do not produce specific design documents, they do communicate about design in different ways. In this paper, we provide quantitative evidence that developers address design through discussions in commits, issues, and pull requests. To achieve this, we built a discussions' classifier and automatically labeled 102,122 discussions from 77 projects. Based on this data, we make four observations about the projects: i) on average, 25{\%} of the discussions in a project are about design; ii) on average, 26{\%} of developers contribute to at least one design discussion; iii) only 1{\%} of the developers contribute to more than 15{\%} of the discussions in a project; and iv) these few developers who contribute to a broad range of design discussions are also the top committers in a project.},
author = {Brunet, Jo{\~{a}}o and Murphy, Gail C. and Terra, Ricardo and Figueiredo, Jorge and Serey, Dalton},
booktitle = {Proceedings of the 11th Working Conference on Mining Software Repositories - MSR 2014},
doi = {10.1145/2597073.2597115},
file = {:home/alvi/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Brunet et al. - 2014 - Do developers discuss design.pdf:pdf},
isbn = {9781450328630},
pages = {340--343},
title = {{Do developers discuss design?}},
url = {http://dl.acm.org/citation.cfm?doid=2597073.2597115},
year = {2014}
}
@article{Zanjani2016,
abstract = {Code review is an important part of the development process. Recently, many open source projects have begun practicing code review through “modern” tools such as GitHub pull-requests and Gerrit. Many commercial software companies use similar tools for code review internally. These tools enable the owner of a source code change to request individuals to participate in the review, i.e., reviewers. However, this task comes with a challenge. Prior work has shown that the benefits of code review are dependent upon the expertise of the reviewers involved. Thus, a common problem faced by authors of source code changes is identifying the best reviewers for their source code change. To address this problem, we present an approach, cHRev, to automatically recommend reviewers who are best suited to participate in a given review, based on their historical contributions as demonstrated in their prior reviews. We evaluate the effectiveness of cHRev on three open source systems as well as a commercial codebase at Microsoft and compare it to the state of the art in reviewer recommendation. We show that by leveraging specific information in previously completed reviews (i.e., quantification of review comments and their recency), we are able to improve dramatically on the performance of prior approaches, which (limitedly) operate on generic review information (i.e., reviewers of similar source code file and path names) or source code repository data. We also present the insights into why our approach cHRev outperforms the existing approaches.},
author = {Zanjani, Motahareh Bahrami and Kagdi, Huzefa and Bird, Christian},
doi = {10.1109/TSE.2015.2500238},
file = {:home/alvi/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Zanjani, Kagdi, Bird - 2016 - Automatically Recommending Peer Reviewers in Modern Code Review.pdf:pdf},
isbn = {0098-5589},
issn = {00985589},
journal = {IEEE Transactions on Software Engineering},
keywords = {Gerrit,Modern code review,code change,reviewer recommendation},
number = {6},
pages = {530--543},
title = {{Automatically Recommending Peer Reviewers in Modern Code Review}},
volume = {42},
year = {2016}
}
@article{Gousios2014,
abstract = {The advent of distributed version control systems has led to the development of a new paradigm for distributed software development; instead of pushing changes to a central repository, developers pull them from other repositories and merge them locally. Various code hosting sites, notably Github, have tapped on the opportunity to facilitate pull-based development by offering workflow support tools, such as code reviewing systems and integrated issue trackers. In this work, we explore how pull-based software development works, first on the GHTorrent corpus and then on a carefully selected sample of 291 projects. We find that the pull request model offers fast turnaround, increased opportunities for community engagement and decreased time to incorporate contributions. We show that a relatively small number of factors affect both the decision to merge a pull request and the time to process it. We also examine the reasons for pull request rejection and find that technical ones are only a small minority.},
author = {Gousios, Georgios and Pinzger, Martin and van Deursen, Arie},
doi = {10.1145/2568225.2568260},
file = {:home/alvi/Downloads/papers/p345-gousios.pdf:pdf},
isbn = {9781450327565},
issn = {1726670X},
keywords = {distributed software devel-,empirical software engineering,opment,pull request,pull-based development},
pages = {345--355},
title = {{An exploratory study of the pull-based software development model}},
year = {2014}
}
@inproceedings{Kagdi2008,
abstract = {An approach to recommend a ranked list of developers to assist in performing software changes given a textual change request is presented. The approach employs a two-fold strategy. First, a technique based on information retrieval is put at work to locate the relevant units of source code, e.g., files, classes, and methods, to a given change request. These units of source code are then fed to a technique that recommends developers based on their source code change expertise, experience, and contributions, as derived from the analysis of the previous commits. The commits are obtained from a software system's version control repositories (e.g., Subversion). The approach is demonstrated on a bug report from KOffice, an open source application suite.},
author = {Kagdi, Huzefa and Hammad, Maen and Maletic, Jonathan I.},
booktitle = {IEEE International Conference on Software Maintenance, ICSM},
doi = {10.1109/ICSM.2008.4658064},
file = {:home/alvi/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Kagdi, Hammad, Maletic - 2008 - Who can help me with this source code change.pdf:pdf},
isbn = {9781424426140},
issn = {1063-6897},
pages = {157--166},
title = {{Who can help me with this source code change?}},
year = {2008}
}
@article{Curtis2012,
abstract = {This article characterizes technical debt across 700 business applications, comprising 357 MLOC. These applications were analyzed against more than 1,200 rules of good architectural and coding practice. The authors present a formula with adjustable parameters for estimating the principal of technical debt from structural quality data.},
author = {Curtis, Bill and Sappidi, Jay and Szynkarski, Alexandra},
doi = {10.1109/MS.2012.156},
file = {:home/alvi/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Curtis, Sappidi, Szynkarski - 2012 - Estimating the principal of an application's technical debt.pdf:pdf},
isbn = {0740-7459},
issn = {07407459},
journal = {IEEE Software},
keywords = {software metrics,software structural quality,static analysis,technical debt},
number = {6},
pages = {34--42},
publisher = {IEEE},
title = {{Estimating the principal of an application's technical debt}},
volume = {29},
year = {2012}
}
@inproceedings{inproceedings,
author = {Thongtanunam, Patanamon and Tantithamthavorn, Chakkrit and Kula, Raula and Yoshida, Norihiro and Iida, Hajimu and Matsumoto, Ken-Ichi},
booktitle = {2015 IEEE 22nd International Conference on Software Analysis, Evolution, and Reengineering, SANER 2015 - Proceedings},
doi = {10.1109/SANER.2015.7081824},
title = {{Who Should Review My Code? A File Location-Based Code-Reviewer Recommendation Approach for Modern Code Review}},
year = {2015}
}
@inproceedings{Tsay2014,
abstract = {Open source software projects often rely on code contributions from a wide variety of developers to extend the capabilities of their software. Project members evaluate these contributions and often engage in extended discussions to decide whether to integrate changes. These discussions have important implications for project management regarding new contributors and evolution of project requirements and direction. We present a study of how developers in open work environments evaluate and discuss pull requests, a primary method of contribution in GitHub, analyzing a sample of extended discussions around pull requests and interviews with GitHub developers. We found that developers raised issues around contributions over both the appropriateness of the problem that the submitter attempted to solve and the correctness of the implemented solution. Both core project members and third-party stakeholders discussed and sometimes implemented alternative solutions to address these issues. Different stakeholders also influenced the outcome of the evaluation by eliciting support from different communities such as dependent projects or even companies. We also found that evaluation outcomes may be more complex than simply acceptance or rejection. In some cases, although a submitter's contribution was rejected, the core team fulfilled the submitter's technical goals by implementing an alternative solution. We found that the level of a submitter's prior interaction on a project changed how politely developers discussed the contribution and the nature of proposed alternative solutions.},
author = {Tsay, Jason and Dabbish, Laura and Herbsleb, James},
booktitle = {Proceedings of the 22nd ACM SIGSOFT International Symposium on Foundations of Software Engineering - FSE 2014},
doi = {10.1145/2635868.2635882},
file = {:home/alvi/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Tsay, Dabbish, Herbsleb - 2014 - Let's talk about it evaluating contributions through discussion in GitHub.pdf:pdf},
isbn = {9781450330565},
pages = {144--154},
title = {{Let's talk about it: evaluating contributions through discussion in GitHub}},
url = {http://dl.acm.org/citation.cfm?doid=2635868.2635882},
year = {2014}
}
@article{Buschmann2007,
author = {Buschmann, Frank and Henney, Kevlin and Schmidt, Douglas C},
doi = {https://doi.org/10.1109/MS.2007.115},
file = {:home/alvi/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Buschmann, Henney, Schmidt - 2007 - Past, Present, and Future Trends in Software Patterns.pdf:pdf},
journal = {Ieee Software},
number = {August},
pages = {31--37},
title = {{Past, Present, and Future Trends in Software Patterns}},
year = {2007}
}
@inproceedings{Black2014,
author = {Black, Elizabeth and McBurney, Peter and Zschaler, Steffen},
booktitle = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
doi = {10.1007/978-3-642-54373-9_7},
file = {:home/alvi/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Black, McBurney, Zschaler - 2014 - Towards agent dialogue as a tool for capturing software design discussions.pdf:pdf},
isbn = {9783642543722},
issn = {16113349},
title = {{Towards agent dialogue as a tool for capturing software design discussions}},
year = {2014}
}
